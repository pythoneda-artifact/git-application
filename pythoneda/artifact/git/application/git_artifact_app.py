# vim: set fileencoding=utf-8
"""
pythoneda/artifact/git/application/git_artifact_app.py

This file can be used to run Git artifact.

Copyright (C) 2023-today rydnr's pythoneda-artifact/git-application

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
import asyncio
from dbus_next import BusType
from pythoneda.shared.application import PythonEDA
from pythoneda.artifact.git.infrastructure.dbus import (
    GitDbusSignalEmitter,
    GitDbusSignalListener,
)
from pythoneda.shared.artifact.events.code.infrastructure.dbus import (
    DbusChangeStagingCodeDescribed,
    DbusChangeStagingRequested,
)


@enable(
    GitDbusSignalEmitter,
    events=[
        {"event-class": DbusChangeStagingCodeDescribed, "bus-type": BusType.SYSTEM}
    ],
)
@enable(
    GitDbusSignalListener,
    events=[
        {"event-class": DbusChangeStagingCodeRequested, "bus-type": BusType.SYSTEM}
    ],
)
class GitArtifactApp(PythonEDA):
    """
    Runs the domain of Git artifacts.

    Class name: GitArtifactApp

    Responsibilities:
        - Runs the domain of Git artifacts.

    Collaborators:
        - None
    """

    def __init__(self, name: str):
        """
        Creates a new GitArtifactApp instance.
        :param name: The app name.
        :type name: str
        """
        # git_artifact_banner is automatically generated by pythoneda-artifact-def/git-application
        try:
            from pythoneda.artifact.git.application.git_artifact_banner import (
                GitArtifactBanner,
            )

            banner = GitArtifactBanner()
        except ImportError:
            banner = None
        super().__init__(name, banner, __file__)


if __name__ == "__main__":
    asyncio.run(GitArtifactApp.main())
# vim: syntax=python ts=4 sw=4 sts=4 tw=79 sr et
# Local Variables:
# mode: python
# python-indent-offset: 4
# tab-width: 4
# indent-tabs-mode: nil
# fill-column: 79
# End:
